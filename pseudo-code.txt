FLOW OF PROGRAM
1. do-while user has not typed "quit"
2. main menu < this function will return which choice the user choce 
3. if it is fakedex data base, enter that function. these functions returns void, 
    for they will only alter the array of struct fakemons
4. if the user enters quit, confirm it  if confimed, exit the loop
5. return 0;

notes:
1. pwede na hindi cancel sa add new entry
2. Same name: overwrite. Same short name: invalid!
3. same name and short name?
4. dex entry only shows if newly caught lang
5. for the box, pwedeng numbers nalang for search and sort
6. after view entry iun box, just go back to slot

font of header: broadway KB

PRINTING BOXES
1. Print top bar
2. Print the main text
3. print top-lower bar
    4. Print contents of the window
5. Print lower bar
    this lower bar would get the input from the user
numbers 1-3 and 5 are repetitive tasks


PRINT_CHOICES_FUNCTION
/* this function displays an array of strings that would be formatted.
    it can print in a grid format (2x2)(4x1), etc...
    it accepts input whether it would print it in justified or centered. 
    it comes with predefined colors. */
// algo for printing tabulated string arrays //
// not yet finished
#include <stdio.h>
#include <string.h>
#define WIDIH 28

typedef char string[10];

// limitations: max number of column is 10
int displayChoices(string words[], int numElem, int column, int row, char format)
{
    int currRow;
    int currCol;
    int printedElem = 0;
    
    int maxLenCol[10] = {};
    int currElem = 0;
    
    int spaces;
    
    int lenCurWord = 0;
    
    int half_width = WIDIH / 2;
    
    // counting the highest length in each column
    for (currRow = 0; currRow < row; currRow++)
    {
        for (currCol = 0; currCol < column && 
            printedElem < numElem; currCol++)
            {
                lenCurWord = strlen(words[currElem]);
                if (maxLenCol[currCol] < lenCurWord)
                    maxLenCol[currCol] = lenCurWord;
                currElem++;
            }
    }
    
    if (format == 'c')
    {
    	// printspaces
    	int i = 0;
    	for (i = 0; i < half_width; i++)
    	{
    		printf(" ");
		}
	}
	else if (format == 'j')
		printf(" ");
	else
		printf("Tabulation not specified");
    
    for (currRow = 0; currRow < row; currRow++)
    {
        for (currCol = 0; currCol < column && 
            printedElem < numElem; currCol++)
            {
                printf("> ");
                printf("%s", words[printedElem]);
                
                
                lenCurWord = strlen(words[printedElem]);
                
                
                if (currCol + 1 < column)
                {
                	if (lenCurWord < maxLenCol[currCol])
                	{
                		for (spaces = 0; spaces < maxLenCol[currCol] - lenCurWord; 
                        spaces++)
                            printf(" ");
					}
                    printf("   ");
                }
                
                printedElem++;
                
            }
        printf("\n");
    }
    
    if (format == 'c')
    {
	    if (WIDTH % 2 != 0)
	    {
	   		// printspaces
	   		int i = 0;
	   		for (i = 0; i < half_width + 1; i++)
	   		{
    			printf(" ");				
			}
		}
	}
	else
	{
		
	}
}

// -------------------------------------------------------- //


MAIN MENU CONTENTS FUNCTION
1. Displaying the pokeball
    while i < elements of pokeball
        (CONTENT_WIDTH - WIDTH_OF POKEBALL) / 2
            this is how much whitespace to put before the pokeball
            printwhitespace(num)
        print the pokeball
        (CONTENT_WIDTH - WIDTH_OF POKEBALL) / 2
            this is how much whitespace to put after the pokeball
            if len of elements is odd
                printwhitespace(num + 1)
            else
                printWhitespace(num)
2. Displaying input choices
    printChoices(menu, 2, 2, 'c')
3. displaying the rest of the blanks
4. Display game message, if there are any.
5. take user input of what they want to do.
6. display error message if there are any errors and (by reprinting the entire screen)
7. return what the user selected


FAKEDEX DATABASE
1. while the user has not enter exit, loop through this
2. Display headers
3. Display home page of fakedex database
    "welcome to the fakedex database trainer! what action would you like to do?"
    printChoices(fakedex_menu, 3, 2, 'c')
4. print the rest of the height
5. display game message, if there are any
6. take user input

PRINT DEX FUNCTION
1. the view, edit, and remove dex are inside 1 function. (fakedex database)
2. this function has the variable page. each page can have a mathematical formula on 
    which index list can nly be printed at a time
2. loop until the user typed exit
3. print header (view, edit, remove)
4. print dex content (this function accepts the page number)
5. if mode is (view / edit / remove)
    each if block nalang yung each printing out of input limitations and possible inputs, 
    printing options etc.
        each mode is also a loop until the user types back / exit
            this goes back to main menu of database
        // if view, edit, remove
        when they select, the index must be in the page
        clear sreen
        this then displays the fakemonDetails()
        do you want to edit/remove/exit
6. if mode is add
    clear screen
    add dex header
    what name, short name
    type cancel if you want to cancel


EXPLORATION
1. print EXPLORATION header
2. print trees from header files
3. print 2d boxes with array.
4. array has either 1 or 0
5. if one print square, if 0 print white box?
6. print trees
7. print directions
8. if move, random function (40% chance of encounter)

ENCOUNTER FUNCTION
this function is inside the eploration function and would be taking the fakemon array
1. possible art:
/\︿╱\
\0_ 0 /╱\╱ 
\▁︹_/
2. Print the header. Wild Fakemon!
3. print the name on left side. then print the picture of the pokemon
4. Print actions.
print message. (a wild <insert fakemon name> has appeared. What will you do?)
5. Input validation


BOX
Page number based on the index avaialble in that page
Loop until the user has typed "exit"
1. Print header (BOX)
2. Print based on number
3. Provide a template image for boxes (header file)
4. Print choice action
5. Input validation
6. searching algo
    search each elemtn.name is cmp == 0, 
    // if you have time, try doing binary search
    return the page number
    ask: do you want ot view, release, cancel?
7. sort
    Selection sort


SETTINGS
1. only needs the Fakemon Database



